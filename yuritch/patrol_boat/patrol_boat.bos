#define TAK

piece base, hull, gun_turret, gun_sleeve, gun_barrel, gun_flare, mg_turret1, mg_sleeve1, mg_barrel1, mg_flare1,
	  mg_turret2, mg_sleeve2, mg_barrel2, mg_flare2, flag, wake1, wake2;

#define BASE_SMOKE_PERIOD	40
#define MIN_SMOKE_PERIOD	240

#define TURRET_TURN_SPEED	<50>
#define PITCH_SPEED			<25>

#define MG_TURN_SPEED		<60>
#define MG_PITCH_SPEED		<30>

#define HULL_LIST_SPEED		<5>
#define HULL_LIST_ANGLE		<-15>

#define RECOIL_LENGTH [0.2]
#define RECOIL_SPEED [10]
#define RECOIL_BACK_SPEED [1]

#define RESTORE_PERIOD		2500

#define WHEEL_ROTATION_SPEED	<180>

#define SIG_MOVE			2
#define SIG_AIM1			4
#define SIG_AIM2			8
#define SIG_AIM3			16

#define SMOKEPIECE	hull

#include "exptype.h"
#include "sfxtype.h"
#include "damageSmoke.h"
static-var					CurrentSpeed, bMoving;

WorkingLoop()
{
	while(TRUE)
	{
		if(bMoving)
		{
			//play-sound("tankgo", 4);
			sleep 500;
		}
		sleep 500;
	}
}

Create()
{
	bMoving = FALSE;
	turn mg_turret2 to y-axis <180> now;
	turn flag to y-axis <180> now;
	start-script DamageSmoke();
	start-script WorkingLoop();
}

SweetSpot(piecenum)
{
	piecenum = hull;
}

EmitWakes()
{
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	start-script EmitWakes();
/*	if(!bMoving)
	{
		play-sound("tankstart", 4);
	}*/
	bMoving = TRUE;
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
/*	if(bMoving)
	{
		play-sound("tankstop", 4);
	}*/
	// We don't want this to trigger on VERY short stops
	sleep 100;
	bMoving = FALSE;
}

RestoreTurret()
{
	set-signal-mask SIG_AIM1|SIG_AIM2|SIG_AIM3;
	sleep RESTORE_PERIOD;
	turn gun_turret to y-axis <0> speed TURRET_TURN_SPEED;
	turn gun_sleeve to x-axis <0> speed PITCH_SPEED;
	turn mg_turret1 to y-axis <0> speed MG_TURN_SPEED;
	turn mg_sleeve1 to x-axis <0> speed MG_PITCH_SPEED;
	turn mg_turret2 to y-axis <180> speed MG_TURN_SPEED;
	turn mg_sleeve2 to x-axis <0> speed MG_PITCH_SPEED;
}

QueryWeapon1(piecenum)
{
	piecenum = gun_flare;
}

AimFromWeapon1(piecenum)
{
	piecenum = gun_turret;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;
	turn gun_turret to y-axis heading speed TURRET_TURN_SPEED;
	turn gun_sleeve to x-axis (0-pitch) speed PITCH_SPEED;
	wait-for-turn gun_turret around y-axis;
	wait-for-turn gun_sleeve around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon1()
{
	show gun_flare;
	move gun_barrel to z-axis (0-RECOIL_LENGTH) speed RECOIL_SPEED;
	sleep 200;
	move gun_barrel to z-axis [0] speed RECOIL_BACK_SPEED;
	hide gun_flare;
}

QueryWeapon2(piecenum)
{
	piecenum = mg_flare1;
}

AimFromWeapon2(piecenum)
{
	piecenum = mg_turret1;
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn mg_turret1 to y-axis heading speed MG_TURN_SPEED;
	turn mg_sleeve1 to x-axis (0-pitch) speed MG_PITCH_SPEED;
	wait-for-turn mg_turret1 around y-axis;
	wait-for-turn mg_sleeve1 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon2()
{
	show mg_flare1;
	sleep 200;
	hide mg_flare1;
}

QueryWeapon3(piecenum)
{
	piecenum = mg_flare2;
}

AimFromWeapon3(piecenum)
{
	piecenum = mg_turret2;
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM3;
	set-signal-mask SIG_AIM3;
	turn mg_turret2 to y-axis heading speed MG_TURN_SPEED;
	turn mg_sleeve2 to x-axis (0-pitch) speed MG_PITCH_SPEED;
	wait-for-turn mg_turret2 around y-axis;
	wait-for-turn mg_sleeve2 around x-axis;
	start-script RestoreTurret();
	return (TRUE);
}

FireWeapon3()
{
	show mg_flare2;
	sleep 200;
	hide mg_flare2;
}

SetDirection(heading)
{
	while (get BUILD_PERCENT_LEFT)
	{
		sleep 200;
	}
	turn flag to y-axis heading now;
	return (TRUE);
}

Killed(severity, corpsetype)
{
	if (severity<50)
	{
		corpsetype = 1;
		turn hull to x-axis HULL_LIST_ANGLE speed HULL_LIST_SPEED;
		wait-for-turn hull around x-axis;
		explode hull type		BITMAPONLY|BITMAP1;
		return (TRUE);
	}
	corpsetype = 2;
	explode hull type		SHATTER|BITMAP1;
	explode gun_turret type	FALL|EXPLODE_ON_HIT|FIRE;
	explode gun_sleeve type		FALL|SMOKE|EXPLODE_ON_HIT|BITMAP4;
	explode gun_barrel type		FALL|SMOKE|EXPLODE_ON_HIT|BITMAP4;
	explode mg_turret1 type	FALL|EXPLODE_ON_HIT|FIRE;
	explode mg_barrel1 type		FALL|SMOKE|EXPLODE_ON_HIT|BITMAP4;
	explode mg_turret2 type	FALL|EXPLODE_ON_HIT|FIRE;
	explode mg_barrel2 type		FALL|SMOKE|EXPLODE_ON_HIT|BITMAP4;
	return (TRUE);
}