#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turretbase, turret1, turret2, charge1, charge2;

static-var  gun_1, gun_2;

// Signal definitions
#define SIG_AIM				2


TurnCharges()
{
turn charge1 to y-axis <-22.5> now;
turn charge2 to y-axis <22.5> now;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	dont-cache turret1;
	dont-cache turret2;
	dont-cache turretbase;
	dont-cache charge1;
	dont-cache charge2;
	dont-shade turret1;
	dont-shade turret2;
	dont-shade turretbase;
	dont-shade charge1;
	dont-shade charge2;
	gun_1 = turret1;
	gun_2 = turret2;
	start-script SmokeUnit();
	start-script TurnCharges();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turretbase to y-axis heading speed <200.000000>;
	wait-for-turn turretbase around y-axis;
	return (1);
}

FirePrimary()
{
	sleep 250;
	if( gun_1 == 0 )
	{
		turn turret1 to y-axis <0.000000> speed <300.000000>;
	}
	if( gun_1 == 1 )
	{
		turn turret1 to y-axis <90.021978> speed <300.000000>;
	}
	if( gun_1 == 2 )
	{
		turn turret1 to y-axis <180.043956> speed <300.000000>;
	}
	if( gun_1 == 3 )
	{
		turn turret1 to y-axis <-90.021978> speed <300.000000>;
	}
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = base;
	}

}
FireSecondary()
{
	sleep 250;
	if( gun_2 == 0 )
	{
		turn turret1 to y-axis <0.000000> speed <300.000000>;
	}
	if( gun_2 == 1 )
	{
		turn turret2 to y-axis <90.021978> speed <300.000000>;
	}
	if( gun_2 == 2 )
	{
		turn turret2 to y-axis <180.043956> speed <300.000000>;
	}
	if( gun_2 == 3 )
	{
		turn turret2 to y-axis <-90.021978> speed <300.000000>;
	}
	++gun_2;
	if( gun_2 == 4 )
	{
		gun_2 = base;
	}

}
AimFromPrimary(piecenum)
{
	piecenum = charge1;
}

QueryPrimary(piecenum)
{
	piecenum = charge1;
}

AimFromSecondary(piecenum)
{
	piecenum = charge2;
}

QuerySecondary(piecenum)
{
	piecenum = charge2;
}

SweetSpot(piecenum)
{
	piecenum = turretbase;
}

Killed(severity, corpsetype)
{
	hide charge1;
	hide charge2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode turretbase type BITMAPONLY | BITMAP2;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP1;
		explode charge1 type BITMAPONLY | BITMAP4;
		explode charge1 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode turret1 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP4;
		explode turretbase type BITMAPONLY | BITMAP3;
		explode charge1 type BITMAPONLY | BITMAP4;
		explode charge2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode turret1 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP4;
		explode turretbase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode charge1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode charge2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode turret1 type BITMAPONLY | BITMAP4;
	explode turret2 type BITMAPONLY | BITMAP4;
	explode turretbase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode charge1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode charge2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
