// Argh's PURE Tank Script

// This script is copyright (C) Wolfe Games, 2007
// All contents were created by Wolfe Games.

// This Include is absolutely VITAL.  
// You must call it FIRST.  PERIOD.
// Don't say I didn't warn you ;-)
#include "STANDARD_COMMANDS_WORLDBUILDER.h"


piece body, turret, aimer, barrel, flare, groundflash, tread1, tread2, tread3, tread4, dust1, dust2, light;

// FX and Smoke Code.
// SmokeUnit_PURE is a completely optional Include.  It *requires* STANDARD_COMMANDS_PURE.h
// ExplosionIncludes_PURE is for explosion FX.  It *requires* SoundLibrary_PURE.h
// This code (C) Wolfe Games.
piece center, explode_point01, explode_point02, explode_point03, explode_point04, explode_point05, explode_point06, explode_point07, explode_point08;
///////////////////////////////////////FX RESERVED FOR EXPLOSIONS
#define EXPLOSION1 1024+1
#define EXPLOSION2 1024+2
#define EXPLOSION3 1024+3
#define EXPLOSION4 1024+4
#define BIG_EXPLOSION1 1024+5
#define BIG_EXPLOSION2 1024+6
#define BIG_EXPLOSION3 1024+7
#define BIG_EXPLOSION4 1024+8
#define MinExplosions 2
#define MaxExplosions 6
#include "ExplosionIncludes_WORLDBUILDER.h"
///////////////////////////////////////END RESERVED
#define GUARDTANK_LAUNCH_FX 1024+9
#define GUARDTANK_GROUND_FLASH 1024+10
#define WORLDBUILDER_TRACKED_FX 1024+11

static-var isMoving, amMoving;

lua_CreateLightMe(arg) { return (0); }
lua_DestroyLightMe(arg) { return (0); }
lua_KnockOver(arg) { return (0); }

TreadControl()
{
	var TreadSection;
	
	While(amMoving)
	{
		++TreadSection;
		If(TreadSection == 3)
		{
			TreadSection = 1;
		}
		If(TreadSection == 1)
		{
			show tread3;
			hide tread1;
			emit-sfx WORLDBUILDER_TRACKED_FX from dust1;
			emit-sfx WORLDBUILDER_TRACKED_FX from dust2;				
		}
		If(TreadSection == 2)
		{
			show tread1;
			hide tread3;
			emit-sfx WORLDBUILDER_TRACKED_FX from dust1;
			emit-sfx WORLDBUILDER_TRACKED_FX from dust2;					
		}
		sleep 60;
	}
	return 0;
}

KnockOver()
{
	var knockTimer;
	knockTimer = rand(500,1500);
	while(amMoving)
	{
		call-script lua_KnockOver();
		sleep knockTimer;
	}
	return 0;
}

Halt()
{
	sleep 200;
	if(!amMoving)
	{
		isMoving = FALSE;
	}	
}

StartMoving()
{
	amMoving = TRUE;
	if (!isMoving)
	{
		isMoving = TRUE;
		start-script TreadControl();
		start-script KnockOver();
	}
}

StopMoving()
{
	amMoving = FALSE;
	start-script Halt();
}

Create()
{
	hide flare;

	hide tread2;
	hide tread3;
	hide tread4;

	amMoving = FALSE;
	isMoving = FALSE;
}

RestoreAfterDelay()
{
	var RandomSeed;
	RandomSeed = RAND(3000, 4000);
	sleep RandomSeed;
	turn turret to y-axis <0.0> speed <65.0>;
	turn aimer to x-axis <0.0> speed <65.0>;
}

QueryWeapon1 (piecenum)
{
	piecenum = flare;
}

AimFromWeapon1 (piecenum)
{
	piecenum = turret;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;

	turn aimer to x-axis 0 - pitch speed <80.0>;
	turn turret to y-axis heading speed <80.0>;

	wait-for-turn turret around y-axis;
	wait-for-turn aimer around x-axis;
	start-script RestoreAfterDelay();
	return(TRUE);
}

FireWeapon1()
{ 

	call-script lua_CreateLightMe(light, 255, 255, 64, 128);
	emit-sfx GUARDTANK_GROUND_FLASH from groundflash;
   	emit-sfx GUARDTANK_LAUNCH_FX from flare; 
	move barrel to z-axis [-9] speed [100];
	sleep 200;
	call-script lua_DestroyLightMe();
	move barrel to z-axis [0] speed [10];
	return(0);
}

Killed(severity, corpsetype)
{
	amMoving = FALSE;
	isMoving = FALSE;
	if (severity <= 50)
	{
		corpsetype = 1;
		call-script Explosion();	
		return (corpsetype);
	} else
	{	
		corpsetype = 2;
		call-script Explosion();		
		return (corpsetype);
	}
	return(0);
}