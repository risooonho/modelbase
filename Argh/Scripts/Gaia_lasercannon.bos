// Argh's WORLDBUILDER Gaia_Lasercannon Script

// This script is copyright (C) Wolfe Games, 2007
// All contents were created by Wolfe Games.

// This Include is absolutely VITAL.  
// You must call it FIRST.  PERIOD.
// Don't say I didn't warn you ;-)
#include "STANDARD_COMMANDS_WORLDBUILDER.h"

piece base, body, gasovm_gun_tank, foot1, foot2, foot3, foot4;
piece turret, aimer, flare, explodepoint;

// SmokeUnit_WORLDBUILDER is a completely optional Include.  It *requires* STANDARD_COMMANDS_WORLDBUILDER.h
// ...to be included (or the code) *BEFORE* you call it.
// And SMOKEPIECE1 through SMOKEPIECE4 MUST BE DEFINED!
// It doesn't matter if they all refer to the same part.
#define SMOKEPIECE1 base
#define SMOKEPIECE2 base
#define SMOKEPIECE3 base
#define SMOKEPIECE4 base
#include "SmokeUnit_WORLDBUILDER.h"
///////////////////////////////////////RESERVED
#define LANDING_DIRT 1024+1
#define BUILDING_PROGRESSIVE 1024+2
#define BUILDING_SMALL_COMPLETE 1024+3
#define BUILDING_COMPLETE 1024+4
///////////////////////////////////////END RESERVED

///////////////////////////////////////RUBBLE_GUN RESERVED
#define Rubble_Gun 2048+3
#define Rubble_Gun2 2048+4
#define Rubble_Gun3 2048+5
///////////////////////////////////////END RESERVED
#define EXPLODEPIECE explodepoint
#include "ExplosionIncludes_WORLDBUILDER.h"

static-var COB_BLOCK;

lua_CheckBlock(arg) { return (0); }

CobBlock()
{
	var RandomNumber;
	RandomNumber = RAND(1000,1500);
	call-script lua_CheckBlock();
	
	if (get LUA1)
	{
		COB_BLOCK = 1;
	} else {   Sleep RandomNumber; }
}

Create()
{

	var RandomTurn;
	RandomTurn = rand(1, 65535);
	turn body to y-axis RandomTurn now;
	
	COB_BLOCK=0;
	hide flare;

	start-script SmokeUnit_WORLDBUILDER();
}

RestoreAfterDelay()
{
	sleep 30000;
	turn aimer to x-axis <0> speed <25>;
}

AimFromWeapon1(piecenum)
{
	piecenum = flare;
	return (0);
}

AimWeapon1(heading, pitch)
{
	if(COB_BLOCK == 0)
	{
		call-script CobBlock();
		return(0);
	}	

	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;
	
  	turn turret to y-axis Heading speed <50>;	
 	turn aimer to x-axis 0 - Pitch speed <50>;

	wait-for-turn turret around y-axis;
	wait-for-turn aimer around x-axis;	

	start-script RestoreAfterDelay();
	return(TRUE);
}

QueryWeapon1(piecenum)
{
	piecenum = flare;
	return (0);
}

FireWeapon1()
{
	return (0);
}

Killed(severity, corpsetype)
{
	if (severity <= 50)
	{
		corpsetype = 1;
		call-script Explosion();	
		return (corpsetype);
	} else
	{	
		corpsetype = 2;
		call-script Explosion();		
		return (corpsetype);
	}
	return(0);
}