// Argh's GuardBot Script

// This script is copyright (C) Wolfe Games, 2007
// All contents were created by Wolfe Games.

// This Include is absolutely VITAL.  
// You must call it FIRST.  PERIOD.
// Don't say I didn't warn you ;-)
#include "STANDARD_COMMANDS_WORLDBUILDER.h"


piece ground_l, ground_r, light_r, light_l, flare1, flare2, flare3, flare4, flare5, flare6;
piece r_thigh, r_shin, r_foot, dust_r1, dust_r2, dust_r3;
piece l_thigh, l_shin, l_foot, dust_l1, dust_l2, dust_l3;
piece r_gun, r_gun_barrel, l_gun, l_gun_barrel;
piece base, head;

// FX and Smoke Code.
// SmokeUnit_PURE is a completely optional Include.  It *requires* STANDARD_COMMANDS_PURE.h
// ExplosionIncludes_PURE is for explosion FX.  It *requires* SoundLibrary_PURE.h
// This code (C) Wolfe Games.
piece center, explode_point01, explode_point02, explode_point03, explode_point04, explode_point05, explode_point06, explode_point07, explode_point08;
///////////////////////////////////////FX RESERVED FOR EXPLOSIONS
#define EXPLOSION1 1024+1
#define EXPLOSION2 1024+2
#define EXPLOSION3 1024+3
#define EXPLOSION4 1024+4
#define BIG_EXPLOSION1 1024+5
#define BIG_EXPLOSION2 1024+6
#define BIG_EXPLOSION3 1024+7
#define BIG_EXPLOSION4 1024+8
#define MinExplosions 16
#define MaxExplosions 20
#include "ExplosionIncludes_WORLDBUILDER.h"
///////////////////////////////////////END RESERVED
#define GUARDTANK_LAUNCH_FX 1024+9
#define GUARDTANK_GROUND_FLASH 1024+10
#define MECH_STOMP_FX_BIG_WORLDBUILDER 1024+11

static-var  amMoving, bAiming, gun, isMoving;

#define RUN_SPEED_FAST	2

lua_CreateLightMe(arg) { return (0); }
lua_DestroyLightMe(arg) { return (0); }

Walk()
{
	while(amMoving)
	{
	isMoving = TRUE;
		if(!bAiming)
		{ 	
		/////////////////////////////////////////////////////////////////////RUNNING
		///////////////////////////////////////////////////////////////////////////////////////RIGHT LEG
			if (amMoving)
			{	
				turn head to y-axis <10> speed <10>*RUN_SPEED_FAST;
				turn l_gun to x-axis <10> speed <10>*RUN_SPEED_FAST;
			
				turn r_thigh to x-axis <30> speed <30>*RUN_SPEED_FAST;
				move r_shin to z-axis [-3.5] speed [0]*RUN_SPEED_FAST;
				turn r_foot to x-axis <65> speed <35>*RUN_SPEED_FAST;				
			
				turn l_thigh to x-axis <105> speed <45>*RUN_SPEED_FAST;
				move l_shin to z-axis [7.1] speed [7.1]*RUN_SPEED_FAST;
				turn l_foot to x-axis <-15> speed <45>*RUN_SPEED_FAST;				
		
				sleep 1000 / RUN_SPEED_FAST;
		
			}
		///////////////////////////////////////////////////////////////////////////////////////FINISH CYCLE
				if (amMoving)
			{	
				turn head to y-axis <0> speed <10>*RUN_SPEED_FAST;
				turn l_gun to x-axis <0> speed <10>*RUN_SPEED_FAST;			
			
				turn r_thigh to x-axis <60> speed <30>*RUN_SPEED_FAST;
				move r_shin to z-axis [0] speed [3.5]*RUN_SPEED_FAST;
				turn r_foot to x-axis <30> speed <35>*RUN_SPEED_FAST;
				
				turn l_thigh to x-axis <60> speed <45>*RUN_SPEED_FAST;
				move l_shin to z-axis [-3.5] speed [10.6]*RUN_SPEED_FAST;
				turn l_foot to x-axis <30> speed <45>*RUN_SPEED_FAST;
	
				sleep 500 / RUN_SPEED_FAST;				
				play-sound ("argh_walkersound3",15);
				emit-sfx MECH_STOMP_FX_BIG_WORLDBUILDER from dust_r1;
				emit-sfx MECH_STOMP_FX_BIG_WORLDBUILDER from dust_r2;
				emit-sfx MECH_STOMP_FX_BIG_WORLDBUILDER from dust_r3;		
				sleep 500 / RUN_SPEED_FAST;
			}		
		///////////////////////////////////////////////////////////////////////////////////////LEFT LEG
			if (amMoving)
			{
				turn head to y-axis <-10> speed <10>*RUN_SPEED_FAST;
				turn r_gun to x-axis <10> speed <10>*RUN_SPEED_FAST;	
							
				turn r_thigh to x-axis <105> speed <45>*RUN_SPEED_FAST;
				move r_shin to z-axis [7.1] speed [7.1]*RUN_SPEED_FAST;
				turn r_foot to x-axis <-15> speed <45>*RUN_SPEED_FAST;	
								
				turn l_thigh to x-axis <30> speed <30>*RUN_SPEED_FAST;
				move l_shin to z-axis [-3.5] speed [0]*RUN_SPEED_FAST;
				turn l_foot to x-axis <65> speed <35>*RUN_SPEED_FAST;			
		
				sleep 1000 / RUN_SPEED_FAST;
			}
		///////////////////////////////////////////////////////////////////////////////////////FINISH CYCLE
				if (amMoving)
			{
				turn head to y-axis <0> speed <10>*RUN_SPEED_FAST;
				turn r_gun to x-axis <0> speed <10>*RUN_SPEED_FAST;	
							
				turn r_thigh to x-axis <60> speed <45>*RUN_SPEED_FAST;
				move r_shin to z-axis [-3.5] speed [10.6]*RUN_SPEED_FAST;
				turn r_foot to x-axis <30> speed <45>*RUN_SPEED_FAST;			
				
				turn l_thigh to x-axis <60> speed <30>*RUN_SPEED_FAST;
				move l_shin to z-axis [0] speed [3.5]*RUN_SPEED_FAST;
				turn l_foot to x-axis <30> speed <35>*RUN_SPEED_FAST;
	
				sleep 500 / RUN_SPEED_FAST;								
				play-sound ("argh_walkersound3",15);
				emit-sfx MECH_STOMP_FX_BIG_WORLDBUILDER from dust_l1;
				emit-sfx MECH_STOMP_FX_BIG_WORLDBUILDER from dust_l2;
				emit-sfx MECH_STOMP_FX_BIG_WORLDBUILDER from dust_l3;	
				sleep 500 / RUN_SPEED_FAST;
			}
		} else {
		/////////////////////////////////////////////////////////////////////RUNNING
		///////////////////////////////////////////////////////////////////////////////////////RIGHT LEG
			if (amMoving)
			{	
				turn r_thigh to x-axis <30> speed <30>*RUN_SPEED_FAST;
				move r_shin to z-axis [-3.5] speed [0]*RUN_SPEED_FAST;
				turn r_foot to x-axis <65> speed <35>*RUN_SPEED_FAST;				
			
				turn l_thigh to x-axis <105> speed <45>*RUN_SPEED_FAST;
				move l_shin to z-axis [7.1] speed [7.1]*RUN_SPEED_FAST;
				turn l_foot to x-axis <-15> speed <45>*RUN_SPEED_FAST;				
		
				sleep 1000 / RUN_SPEED_FAST;
		
			}
		///////////////////////////////////////////////////////////////////////////////////////FINISH CYCLE
				if (amMoving)
			{	
				turn r_thigh to x-axis <60> speed <30>*RUN_SPEED_FAST;
				move r_shin to z-axis [0] speed [3.5]*RUN_SPEED_FAST;
				turn r_foot to x-axis <30> speed <35>*RUN_SPEED_FAST;
				
				turn l_thigh to x-axis <60> speed <45>*RUN_SPEED_FAST;
				move l_shin to z-axis [-3.5] speed [10.6]*RUN_SPEED_FAST;
				turn l_foot to x-axis <30> speed <45>*RUN_SPEED_FAST;
	
				sleep 500 / RUN_SPEED_FAST;				
				play-sound ("argh_walkersound3",15);
				emit-sfx MECH_STOMP_FX_BIG_WORLDBUILDER from dust_r1;
				emit-sfx MECH_STOMP_FX_BIG_WORLDBUILDER from dust_r2;
				emit-sfx MECH_STOMP_FX_BIG_WORLDBUILDER from dust_r3;		
				sleep 500 / RUN_SPEED_FAST;
			}		
		///////////////////////////////////////////////////////////////////////////////////////LEFT LEG
			if (amMoving)
			{
			
				turn r_thigh to x-axis <105> speed <45>*RUN_SPEED_FAST;
				move r_shin to z-axis [7.1] speed [7.1]*RUN_SPEED_FAST;
				turn r_foot to x-axis <-15> speed <45>*RUN_SPEED_FAST;	
								
				turn l_thigh to x-axis <30> speed <30>*RUN_SPEED_FAST;
				move l_shin to z-axis [-3.5] speed [0]*RUN_SPEED_FAST;
				turn l_foot to x-axis <65> speed <35>*RUN_SPEED_FAST;			
		
				sleep 1000 / RUN_SPEED_FAST;
			}
		///////////////////////////////////////////////////////////////////////////////////////FINISH CYCLE
				if (amMoving)
			{
			
				turn r_thigh to x-axis <60> speed <45>*RUN_SPEED_FAST;
				move r_shin to z-axis [-3.5] speed [10.6]*RUN_SPEED_FAST;
				turn r_foot to x-axis <30> speed <45>*RUN_SPEED_FAST;			
				
				turn l_thigh to x-axis <60> speed <30>*RUN_SPEED_FAST;
				move l_shin to z-axis [0] speed [3.5]*RUN_SPEED_FAST;
				turn l_foot to x-axis <30> speed <35>*RUN_SPEED_FAST;
	
				sleep 500 / RUN_SPEED_FAST;								
				play-sound ("argh_walkersound3",15);
				emit-sfx MECH_STOMP_FX_BIG_WORLDBUILDER from dust_l1;
				emit-sfx MECH_STOMP_FX_BIG_WORLDBUILDER from dust_l2;
				emit-sfx MECH_STOMP_FX_BIG_WORLDBUILDER from dust_l3;	
				sleep 500 / RUN_SPEED_FAST;
			}
		}				
	}
	return 0;
}

Halt()
{
	sleep 30;
	if(!amMoving)
	{
		isMoving = FALSE;
		//LEGS HALT
		
		turn l_thigh to x-axis <60> speed <500>;
		move l_shin to z-axis 0 speed [250];
		turn l_foot to x-axis <30> speed <500>;
			
		turn r_thigh to x-axis <60> speed <500>;
		move r_shin to z-axis 0 speed [250];
		turn r_foot to x-axis <30> speed <500>;
	}		
}

StartMoving()
{
	amMoving = TRUE;
	if (!isMoving)
	{
		start-script Walk();
	}
}

StopMoving()
{
	amMoving = FALSE;
	start-script Halt();
}

Create()
{
	turn r_thigh to x-axis <60> now;
	turn l_thigh to x-axis <60> now;
	turn r_foot to x-axis <30> now;
	turn l_foot to x-axis <30> now;	

	amMoving = TRUE;
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare5;
	hide flare6;
}

RestoreAfterDelay()
{
	sleep 5000;
	turn head to y-axis <0> speed <50>;
	turn l_gun to x-axis <0> speed <30>;
	turn r_gun to x-axis <0> speed <30>;
	stop-spin l_gun_barrel around z-axis decelerate <50>;
	stop-spin r_gun_barrel around z-axis decelerate <50>;
	
	bAiming = FALSE;
}

AimFromWeapon1(piecenum)
{
	piecenum = head;
	return (0);
}

AimWeapon1(heading,pitch)
{	
	signal SIG_AIM1;
	set-signal-mask SIG_AIM1;

	bAiming = TRUE;
		
	spin l_gun_barrel around z-axis speed <300> accelerate <25>;
	spin r_gun_barrel around z-axis speed <300> accelerate <25>;	

	turn head to y-axis heading speed <100>;
	turn l_gun to x-axis 0 - pitch speed <100>;
	turn r_gun to x-axis 0 - pitch speed <100>;	
	wait-for-turn head around y-axis;
	wait-for-turn l_gun around x-axis;
	wait-for-turn r_gun around x-axis;	
	
	start-script RestoreAfterDelay();
	return (1);
}

QueryWeapon1(piecenum)
{
	if (gun == 1)
	{
		piecenum = flare2;
	}
	if (gun == 3)
	{
		piecenum = flare4;
	}			
	if (gun == 5)
	{
		piecenum = flare6;
	}
	
	if (gun == 2)
	{
		piecenum = flare1;
	}
	if (gun == 4)
	{
		piecenum = flare3;
	}			
	if (gun == 6)
	{
		piecenum = flare5;
	}			
}

Shot1(piecenum)
{
	++gun;
	if (gun == 7)
	{
		gun = 1;
	}
	if (gun == 1)
	{
		call-script lua_CreateLightMe(light_r, 255, 160, 0, 128);
		emit-sfx GUARDTANK_GROUND_FLASH from ground_r;
		emit-sfx GUARDTANK_LAUNCH_FX from flare2;
		sleep 60;
		call-script lua_DestroyLightMe();
	}
	if (gun == 3)
	{
		call-script lua_CreateLightMe(light_r, 255, 160, 0, 128);
		emit-sfx GUARDTANK_GROUND_FLASH from ground_r;
		emit-sfx GUARDTANK_LAUNCH_FX from flare4;
		sleep 60;
		call-script lua_DestroyLightMe();
	}	
	if (gun == 5)
	{
		call-script lua_CreateLightMe(light_r, 255, 160, 0, 128);
		emit-sfx GUARDTANK_GROUND_FLASH from ground_r;
		emit-sfx GUARDTANK_LAUNCH_FX from flare6;
		sleep 60;
		call-script lua_DestroyLightMe();
	}
	
	if (gun == 2)
	{
		call-script lua_CreateLightMe(light_l, 255, 160, 0, 128);
		emit-sfx GUARDTANK_GROUND_FLASH from ground_l;
		emit-sfx GUARDTANK_LAUNCH_FX from flare1;
		sleep 60;
		call-script lua_DestroyLightMe();
	}
	if (gun == 4)
	{
		call-script lua_CreateLightMe(light_l, 255, 160, 0, 128);
		emit-sfx GUARDTANK_GROUND_FLASH from ground_l;
		emit-sfx GUARDTANK_LAUNCH_FX from flare3;
		sleep 60;
		call-script lua_DestroyLightMe();
	}	
	if (gun == 6)
	{
		call-script lua_CreateLightMe(light_l, 255, 160, 0, 128);
		emit-sfx GUARDTANK_GROUND_FLASH from ground_l;
		emit-sfx GUARDTANK_LAUNCH_FX from flare5;
		sleep 60;
		call-script lua_DestroyLightMe();
	}			
	
}	

FireWeapon1()
{
	return (0);	
}

Killed(severity, corpsetype)
{
	if (severity <= 50)
	{
		corpsetype = 1;
		call-script Explosion();
		return (corpsetype);
	} else
	{	
		corpsetype = 2;
		call-script Explosion();		
		return (corpsetype);
	}
	return(0);
}