#include "constants.h"

piece  base, tower, top, arm1, panel1, arm2, panel2, ant; 

static-var  changing;

Create()
{
	sleep 500;
}

Activate()
{
	move tower to y-axis [5] speed [3];
	move top to y-axis [2] speed [2];
	move ant to y-axis [6] speed [5];
	//wait-for-move top along y-axis;
	
	move arm1 to z-axis [-5] speed [7];
	move arm2 to z-axis [5] speed [7];
	move panel1 to y-axis [2] speed [5];
	move panel2 to y-axis [2] speed [5];
	
	turn panel1 to x-axis <90> speed <50>;
	turn panel2 to x-axis <-90> speed <50>;
	
	//wait-for-move arm1 along z-axis;
	spin arm1 around z-axis speed <50>;
	spin arm2 around z-axis speed <-50>;
	spin tower around y-axis speed <30>;
	
	sleep 500;
}

Deactivate()
{
	spin arm1 around z-axis speed <0>;
	spin arm2 around z-axis speed <0>;
	turn arm1 to z-axis <0> speed <70>;
	turn arm2 to z-axis <0> speed <70>;
	wait-for-turn arm1 around z-axis;
	
	spin tower around y-axis speed <0> accelerate <20>;
	
	turn panel1 to x-axis <0> speed <90>;
	turn panel2 to x-axis <0> speed <90>;
	//wait-for-turn panel1 around x-axis;
	
	move tower to y-axis [0] speed [5];
	move top to y-axis [0] speed [2];
	move ant to y-axis [0] speed [7];
	
	move arm1 to z-axis [0] speed [7];
	move arm2 to z-axis [0] speed [7];
	move panel1 to z-axis [-2] speed [5];
	move panel2 to z-axis [2] speed [5];
	move panel1 to y-axis [0] speed [2];
	move panel2 to y-axis [0] speed [2];
	//wait-for-move panel1 along z-axis;
	move panel1 to z-axis [0] speed [5];
	move panel2 to z-axis [0] speed [5];
	//wait-for-move panel1 along y-axis;
	//wait-for-move arm1 along y-axis;
	
	sleep 500;
}



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from top;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1 type BITMAPONLY | BITMAP2;
		explode arm2 type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP2;
		explode panel1 type BITMAPONLY | BITMAP1;
		explode panel2 type BITMAPONLY | BITMAP1;
		explode tower type BITMAPONLY | BITMAP1;
		explode top type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm1 type FALL | BITMAP2;
		explode arm2 type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP2;
		explode panel1 type BITMAPONLY | BITMAP1;
		explode panel2 type BITMAPONLY | BITMAP1;
		explode tower type BITMAPONLY | BITMAP1;
		explode top type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP2;
		explode panel1 type BITMAPONLY | BITMAP1;
		explode panel2 type BITMAPONLY | BITMAP1;
		explode tower type BITMAPONLY | BITMAP1;
		explode top type SHATTER | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode arm1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode arm2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP2;
	explode panel1 type BITMAPONLY | BITMAP1;
	explode panel2 type BITMAPONLY | BITMAP1;
	explode tower type BITMAPONLY | BITMAP1;
	explode top type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
