#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, barrelbase, rbarrel, rflare, lbarrel, lflare, rfueltank, lfueltank, rfwheel, rrwheel, lfwheel, lrwheel;

static-var  restore_delay, gun_1, currspeed, spinspeed;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.016484>;
	turn base to x-axis Func_Var_1 speed <105.016484>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

SpinWheels()
{
	while( TRUE )
	{
		currspeed = get CURRENT_SPEED;
		
		spinspeed = currspeed / [1.1775] * <180>;
		
		spin rfwheel around x-axis speed spinspeed;
		spin rrwheel around x-axis speed spinspeed;
		spin lfwheel around x-axis speed spinspeed;
		spin lrwheel around x-axis speed spinspeed;
		sleep 30;
	}
}

Create()
{
	hide rflare;
	hide lflare;
	
	gun_1 = 0;
	restore_delay = 3000;
	
	start-script SpinWheels();
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <90>;
	turn barrelbase to x-axis <0.000000> speed <50>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <200.000000>;
	turn barrelbase to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrelbase around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		sleep 200;
	}
	if( gun_1 == 1 )
	{
		sleep 200;
	}
	gun_1 = !gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryWeapon1(piecenum)
{
	if(gun_1 == 0)
	{
		piecenum = rflare;
	}
	if(gun_1 == 1)
	{
		piecenum = lflare;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide lflare;
	hide rflare;
	hide barrelbase;
	
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode rbarrel type BITMAPONLY | BITMAP1;
		explode lbarrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode rfueltank type BITMAPONLY | BITMAP4;
		explode lfueltank type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode rbarrel type FALL | BITMAP1;
		explode lbarrel type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode rfwheel type FALL | BITMAP3;
		explode rrwheel type FALL | BITMAP3;
		explode lfwheel type FALL | BITMAP3;
		explode lrwheel type FALL | BITMAP3;
		explode rfueltank type SHATTER | BITMAP4;
		explode lfueltank type SHATTER | BITMAP4;
		explode turret type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode rfwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode rrwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode lfwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode lrwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode rfueltank type SHATTER | BITMAP4;
		explode lfueltank type SHATTER | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode rfwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode rrwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode lfwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode lrwheel type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode rfueltank type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode lfueltank type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
