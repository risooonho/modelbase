#include "sfxtype.h"
#include "exptype.h"

piece 	base, fdoor1, fdoor2, rdoor1, rdoor2, rwheel1, rwheel2, rwheel3, lwheel1, lwheel2, lwheel3,
		swivel, larm, uarm, nanosprayer, nano, rfueltank, lfueltank;

static-var  buildheading, buildpitch, statechg_DesiredState, statechg_StateChanging,
			currspeed, spinspeed, bMoving, randturn1, randturn2, randturn3;

activatescr()
{
	//opening up anim
	if( TRUE )
	{
		move fdoor1 to z-axis [4.875] speed [9.75];
		move rdoor1 to z-axis [-4.875] speed [9.75];
		sleep 490;
		move fdoor2 to z-axis [4.75] speed [9.5];
		move rdoor2 to z-axis [-4.75] speed [9.5];
		wait-for-move fdoor2 along z-axis;
		wait-for-move rdoor2 along z-axis;
	}
	if( TRUE )
	{
		turn larm to x-axis <0> speed <70>;
		turn uarm to x-axis <0> speed <140>;
		turn nanosprayer to x-axis <0> speed <108>;
		wait-for-turn larm around x-axis;
		wait-for-turn uarm around x-axis;
		wait-for-turn nanosprayer around x-axis;
	}
	if( TRUE )
	sleep 20;
}

deactivatescr()
{
	if( TRUE )
	{
		//closing up anim
		turn larm to x-axis <-35> speed <70>;
		turn uarm to x-axis <70> speed <140>;
		turn nanosprayer to x-axis <54> speed <108>;
		wait-for-turn larm around x-axis;
		wait-for-turn uarm around x-axis;
		wait-for-turn nanosprayer around x-axis;
	}
	if( TRUE )
	{

		move fdoor2 to z-axis [0] speed [9.5];
		move rdoor2 to z-axis [0] speed [9.5];
		sleep 490;	
		move fdoor1 to z-axis [0] speed [9.75];
		move rdoor1 to z-axis [0] speed [9.75];
		wait-for-move fdoor1 along z-axis;
		wait-for-move rdoor1 along z-axis;
	}
	sleep 20;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script activatescr();
	turn swivel to y-axis buildheading speed <180>;
	turn nanosprayer to x-axis 1 - buildpitch speed <108>;
	wait-for-turn swivel around y-axis;
	wait-for-turn nanosprayer around x-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn swivel to y-axis <0.000000> speed <180>;
	turn nanosprayer to x-axis <0> speed <108>;
	wait-for-turn swivel around y-axis;
	wait-for-turn nanosprayer around x-axis;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

StartMoving()
{
	bMoving = 1;
}

StopMoving()
{
	bMoving = 0;
}

SpinWheels()
{
	while( TRUE )
	{
		currspeed = get CURRENT_SPEED;
		
		if( !bMoving )
		{
			stop-spin rwheel1 around x-axis;
			stop-spin rwheel2 around x-axis;
			stop-spin rwheel3 around x-axis;
			stop-spin lwheel1 around x-axis;
			stop-spin lwheel2 around x-axis;
			stop-spin lwheel3 around x-axis;
			sleep 30;	
		}
		
		if( bMoving )
		{
			if( currspeed <= [0.5] )
			{
				spinspeed = <102>;
				spin rwheel1 around x-axis speed spinspeed;
				spin rwheel2 around x-axis speed spinspeed;
				spin rwheel3 around x-axis speed spinspeed;
				spin lwheel1 around x-axis speed spinspeed;
				spin lwheel2 around x-axis speed spinspeed;
				spin lwheel3 around x-axis speed spinspeed;
				sleep 30;
			}
			if( [0.5] < currspeed <= [1] )
			{
				spinspeed = <204>;
				spin rwheel1 around x-axis speed spinspeed;
				spin rwheel2 around x-axis speed spinspeed;
				spin rwheel3 around x-axis speed spinspeed;
				spin lwheel1 around x-axis speed spinspeed;
				spin lwheel2 around x-axis speed spinspeed;
				spin lwheel3 around x-axis speed spinspeed;
				sleep 30;
			}
			if( currspeed > [1])
			{
				spinspeed = currspeed / [1.76] * <360>;
				spin rwheel1 around x-axis speed spinspeed;
				spin rwheel2 around x-axis speed spinspeed;
				spin rwheel3 around x-axis speed spinspeed;
				spin lwheel1 around x-axis speed spinspeed;
				spin lwheel2 around x-axis speed spinspeed;
				spin lwheel3 around x-axis speed spinspeed;
				sleep 30;
			}
		}
	}
}

Create()
{
	turn larm to x-axis <-35> now;
	turn uarm to x-axis <70> now;
	turn nanosprayer to x-axis <54> now;

	buildheading = 0;
	buildpitch = 0;

	randturn1 = rand( 0, 120 );
	randturn2 = rand( 120, 240 );
	randturn3 = rand( 240, 360 );
	
	turn rwheel1 to x-axis randturn1 * <1> now;
	turn rwheel2 to x-axis randturn2 * <1> now;
	turn rwheel3 to x-axis randturn3 * <1> now;
	turn lwheel1 to x-axis randturn3 * <1> now;
	turn lwheel2 to x-axis randturn2 * <1> now;
	turn lwheel3 to x-axis randturn1 * <1> now;
	
	call-script InitState();
	start-script SpinWheels();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	buildheading = heading;
	buildpitch = pitch;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = nano;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
	/*	explode arm type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano type BITMAPONLY | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;	*/
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
	/*	explode arm type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		explode turret type FALL | BITMAP3;		*/
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
	/*	explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;	*/
		return (0);
	}
	corpsetype = 3;
/*	explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type BITMAPONLY | BITMAP4;
	explode door2 type BITMAPONLY | BITMAP5;
	explode nano type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode plate type BITMAPONLY | BITMAP2;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3; */
}
