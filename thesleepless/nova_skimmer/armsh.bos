	#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, gun_l, gun_r, flare_l, flare_r, wake1, wake2, wake3, wake4, wake5, wake6, thruster1, thruster2, thruster3, thruster4, thruster5, propulsor1, propulsor2;
static-var  wobble, random, gun_number, gh, speed;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4
#define UPRIGHT				79
#define CURRENT_SPEED		29

#define RESTORE_DELAY 		100




SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

WobbleUnit()
{
	while( TRUE )
	{
		if( wobble == TRUE )
		{
			move base to y-axis [0.800000] speed [1.20000];
		}
		if( wobble == FALSE )
		{
			move base to y-axis [-0.800000] speed [1.20000];
		}
		wobble = !wobble;
		sleep 750;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		gh = get GROUND_HEIGHT;
		if(gh <= 0 )
		{
			random = Rand( 1, 2 );
			if( random == 1 )
			{
				emit-sfx 5 from wake1;
				emit-sfx 5 from wake2;
				emit-sfx 5 from wake3;
				emit-sfx 5 from wake4;
				emit-sfx 3 from wake1;
			 	emit-sfx 3 from wake2;
			  	emit-sfx 3 from wake3;
			  	emit-sfx 3 from wake4;
			}
			if( random == 2 )
			{
				emit-sfx 5 from wake3;
				emit-sfx 5 from wake4;
				emit-sfx 5 from wake5;
				emit-sfx 5 from wake6;
				emit-sfx 3 from wake3;
			 	emit-sfx 3 from wake4;
			  	emit-sfx 3 from wake5;
			  	emit-sfx 3 from wake6;
			}
		}
		speed = get CURRENT_SPEED;
		if( speed > 0 )
		{
			emit-sfx 1024+0 from thruster1;
			emit-sfx 1024+0 from thruster2;
			emit-sfx 1024+0 from thruster3;
			emit-sfx 1024+0 from thruster4;
			emit-sfx 1024+0 from thruster5;
		}
		emit-sfx 1024+1 from propulsor1;
		emit-sfx 1024+1 from propulsor2;
		sleep 50;
	}
}

StopMoving()
{
	sleep 150;
}

slopeAdjust()
{
	while(TRUE)
	{
		gh = get GROUND_HEIGHT;
		if(gh > 0)
		{
			set UPRIGHT to 0;
		}
		if(gh <= 1)
		{
			set UPRIGHT to 1;
		}
		sleep 50;
	}
}

Create()
{
	wobble = TRUE;
	gun_number = 1;
	start-script SmokeUnit();
	start-script WobbleUnit();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn base to x-axis <0.0> - pitch speed <100.0>;
	wait-for-turn base around x-axis;
	return (1);
}

FirePrimary()
{
	if(gun_number == 1) {
    	emit-sfx 1024+0 from flare_l;
    	move gun_l to z-axis [-1.00000] speed [20.0];
    	wait-for-move gun_l along z-axis;
    	move gun_l to z-axis [0] speed [10];
    	gun_number = 2;
    }
    if(gun_number == 2) {
    	emit-sfx 1024+0 from flare_r;
    	move gun_r to z-axis [-1.00000] speed [20.0];
    	wait-for-move gun_r along z-axis;
    	move gun_r to z-axis [0] speed [10];
    	gun_number = 1;
    }
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	if(gun_number == 1) {
		piecenum = gun_l;
	}
	if(gun_number == 2) {
		piecenum = gun_r;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	// hide flare
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
}
